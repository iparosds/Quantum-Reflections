@startuml QuantumReflectionsClasses

class Asteroid {
    -SHIP_ATTRACTION: float
    -ORE: PackedScene
    -health: int
    -moving: bool
    -ore: bool
    -asteroid_type: int
    -level: int
    -player: Node2D
    -portal: Node2D

    -_ready(): void
    -on_portal_opened(p: Node2D): void
    -on_portal(): void
    -_physics_process(delta: float): void
    +player_collision(): void
    +asteroid_destruction(): void
    +add_new_ore(): void
    +take_damage(): void
    -_on_asteroid_explosion_timeout(): void
    -_on_asteroid_life_timeout(): void
}
Asteroid::_physics_process --> Player : Checks
Asteroid::_physics_process --> GlobalSingleton::level::portal_active : Checks
Asteroid::_physics_process --> GlobalSingleton::quantum : Checks
Asteroid::player_collision --> Player::health : Damages
Asteroid::add_new_ore --> Ore : Instantiates
Asteroid::take_damage --> Player::acceleration : Checks


class Player {
    -BLACK_HOLE: PackedScene
    -DAMAGE_RATE: int
    -MAX_ACCELERATION: float
    -turrets: Dictionary
    -PLAYER_LEVELS: Array
    -current_level_index: int
    -health: float
    -acceleration: float
    -accelelariting: bool
    -boosting: bool
    -stopping: bool
    -rotating_right: bool
    -rotating_left: bool
    -level: int
    -dying_to_black_hole: bool
    -health_depleted: Signal

    -_ready(): void
    +is_player(): bool
    +world_limit(size: float): void
    +portal(): void
    -_init_level_progress(): void
    -_update_level_from_score(score: int): void
    -_level_for_score(score: int): int
    -_apply_level_up_to(target_level_index: int, notify: bool): void
    -_physics_process(delta: float): void
    +start_black_hole_death(black_hole_center: Vector2, consume_duration : float, total_spins : float): void
    -_black_hole_consume_step(progress: float, initial_position: Vector2, black_hole_center: Vector2, initial_rotation: float, initial_scale: Vector2, total_spins: float, ship_visual: Node2D): void
    -_camera_focus_to_point(black_hole_center: Vector2, consume_duration: float): void
    -_disable_all_turrets(): void
}
Player::BLACK_HOLE --> BlackHole : Preloads
Player::turrets --> Turret : References
Player::_ready --> GlobalSingleton::player : Register Self
Player::DAMAGE_RATE --> Asteroid::take_damage : Damages
Player::_ready --> Turret : Chooses
Player::_init_level_progress --> GlobalSingleton::level::get_score : Gets score
Player::_apply_level_up_to --> Turret::current_bullet : Updates
Player::_apply_level_up_to --> GlobalSingleton::gui_manager::show_level_up_notice : Notifies Level Up
Player::_physics_process --> GlobalSingleton::quantum : Checks
Player::_physics_process --> Asteroid::player_collision : Collides
Player::_physics_process --> Ore::is_coin : Checks
Player::_physics_process --> GlobalSingleton::level::add_ore : Collects
Player::_physics_process --> BlackHole : Instantiates
Player::start_black_hole_death --> GlobalSingleton::god_mode : Checks
Player::start_black_hole_death --> GlobalAudioPlayer::fade_out_and_stop : Fades out
Player::start_black_hole_death --> GlobalSingleton::game_over : Triggers
Player::_disable_all_turrets --> Turret : Disables
Player::_disable_all_turrets --> Turret::cooldown : Resets


class BlackHole {
    +WARNING_NEAR_RADIUS : float
    -warning_sent : bool
    -activated : bool
    -player_on_black_hole : bool
    -size : int
    -victim : Node2D
    -consuming : bool

    +_on_body_entered(body : Node2D) : void
    -_physics_process(delta : float) : void
    -_exit_tree() : void
    +_on_body_exited(body : Node2D) : void
    -_on_increase_size_timeout() : void
    -_on_activate_timer_timeout() : void
    +_start_consume_now() : void
}
BlackHole::_on_body_entered --> Player::is_player : Type check
BlackHole::_start_consume_now --> Player::start_black_hole_death : Consume
BlackHole::_physics_process --> Player::global_position : Distance check


class Bullet {
    -RANGE : int
    -level : Level
    +bullet_rotation : float
    +target : Node2D
    -direction : Vector2
    -travelled_distance : float
    -move_speed : float

    -_ready(): void
    -_physics_process(delta: float): void
    -_on_body_entered(body): void
    -_on_explosion_timeout(): void
}
Bullet::_on_body_entered --> Asteroid::take_damage : Damages


class Bullet2 {
    -RANGE : int
    -game : Node2D
    +bullet_rotation : float
    +target : Node2D
    -direction : Vector2
    -travelled_distance : float
    -move_speed : float

    -_ready(): void
    -_physics_process(delta: float): void
    -_on_body_entered(body): void
}
Bullet2::_on_body_entered --> Asteroid::take_damage : Damages


class Projectile {
    +display_name : StringName
    +icon : Texture2D
    +scene : PackedScene

    -_ready(): void
    -_process(delta: float): void
}


class Turret {
    -BULLET_1 : PackedScene
    -BULLET_2 : PackedScene
    -projectile : Projectile
    -projectiles_parent_group : String
    -projectiles_node : Projectile
    +cooldown : bool
    +current_bullet : int
    +try_shoot() : bool

    -_ready() : void
    +shoot(target_enemy : Node2D) : void
    -_physics_process(delta : float) : void
    +_on_timer_timeout : void
}
Turret::BULLET_1 --> Bullet : Preloads
Turret::BULLET_2 --> Bullet2 : Preloads
Turret::projectile --> Projectile : References
Turret::shoot --> Projectile::scene : Instantiates
Turret::shoot --> Bullet : Instantiates
Turret::shoot --> Bullet2 : Instantiates
Turret::shoot --> Bullet::bullet_rotation : Sets
Turret::shoot --> Bullet::target : Assign
Turret::shoot --> Bullet2::bullet_rotation : Sets
Turret::shoot --> Bullet2::target : Assign


class Level {
    -ASTEROID : PackedScene
    -PORTAL : PackedScene
    -level_duration_seconds : float
    -portal_duration_seconds : float
    +game_paused : bool
    +quantum : bool
    +portal_active : bool
    +score : int
    +quantum_roll : int
    +portal_timer : float
    -portal_node : Node2D
    
    -_ready(): void
    +_open_portal(): void
    +win(): void
    +spawn_asteroid(): void
    +reset_quantum() : void
    -_physics_process(delta: float): void
    +add_ore() : void
    +_update_xp_label_text() : void
    +get_score() : void
    +_on_world_body_exited(body : Node2D) : void
    -_on_timer_timeout() : void
}
Level::ASTEROID --> Asteroid : Preloads
Level::PORTAL --> Portal : Preloads
Level::_ready --> GlobalSingleton::level : Register Self
Level::_ready --> GlobalAudioPlayer::_play_level_music : Plays music
Level::_ready --> GlobalSingleton::gui_manager::hud_timer_bar : Starts
Level::_open_portal --> Portal : Instantiates
Level::win --> GlobalSingleton::gui_manager::hud_portal_active : Disables
Level::win --> GlobalSingleton::gui_manager::game_over_screen : Enables
Level::win --> GlobalSingleton::settings_icon : Disables
Level::spawn_asteroid --> Asteroid : Instantiates
Level::_physics_process --> GlobalSingleton::god_mode : Checks
Level::_physics_process --> GlobalSingleton::gui_manager::hud_god_mode : Updates
Level::_physics_process --> GlobalSingleton::gui_manager::hud_portal_active : Enables
Level::_physics_process --> GlobalSingleton::gui_manager::hud_portal_active : Enables
Level::_physics_process --> GlobalSingleton::gui_manager::hud_timer_bar : Changes
Level::_physics_process --> GlobalSingleton::gui_manager::hud_xp : Updates
Level::_update_xp_label_text --> Player::PLAYER_LEVELS : Updates
Level::_physics_process --> GlobalSingleton::gui_manager::hud_score_label : Updates
Level::_on_world_body_exited --> Player::is_player : Checks


class Ore {
    -moving_speed : int
    -player : Player
    -level : Level

    -_physics_process(delta: float): void
    +is_coin(): bool
}
Ore::_physics_process --> GlobalSingleton::level::add_ore : Generates
Ore::_physics_process --> Player::is_player : Checks
Ore::_physics_process --> GlobalSingleton::player::global_position : Moves towards


class Portal {
    -level : Level

    +_on_body_entered(body : Node2D) : void
}
Portal::_on_body_entered --> GlobalSingleton::level::portal_active : Checks
Portal::_on_body_entered --> Player::is_player : Type check
Portal::_on_body_entered --> GlobalSingleton::level::win : Triggers
Portal::_on_body_entered --> Asteroid::on_portal : Disappears


class TutorialDialoqueBalloon {
    +next_action : StringName
    +skip_action : StringName
    +mutation_hide_delay : float
    -resource : DialoqueResource
    -temporary_game_states : Array
    -is_waiting_for_input : bool
    -will_hide_balloon : bool
    +locals : Dictionary
    -_locale : String
    -advance_after_blocking_mutation : bool
    -dialogue_line : DialogueLine
    -mutation_cooldown : Timer
    -character_label : RichTextLabel
    -dialoque_label : DialogueLabel
    -responses_menu : DialogueResponsesMenu

    -_ready() : void
    -_unhandled_input(event : InputEvent) : void
    -_notification(what: int) : void
    -start(dialogue_resource: DialogueResource, title: String, extra_game_states: Array) : void
    -apply_dialogue_line() : void
    -next(next_id: String) : void
    -_on_mutation_cooldown_timeout() : void
    -_on_mutated(_mutation: Dictionary) : void
    -_on_balloon_gui_input(event: InputEvent) : void
    -_on_responses_menu_response_selected(response: DialogueResponse) : void
}


class GlobalAudioPlayer {
    +MENU_MUSIC : String
    +LEVEL_MUSIC : String
    +BUS_MASTER : String
    +BUS_MUSIC : String
    +BUS_SFX : String
    -_last_level_pos : float
    -_current_track : String
    -fade_tween : Tween

    -_ready() : void
    +_enable_looping() : void
    +_force_stream_loop(stream: AudioStream) : void
    +_on_finished() : void
    +_play_music(music: AudioStream, volume: float, from_pos: float) : void
    +_play_menu_music() : void
    +_play_level_music(resume: bool) : void
    +remember_level_position_and_stop() : void
    +on_pause_entered() : void
    +on_pause_exited() : void
    +on_level_restart() : void
    +set_master_volume_db(db: float) : void
    +set_music_volume_db(db: float) : void
    +set_sfx_volume_db(db: float) : void
    +get_master_volume_db() : float
    +get_music_volume_db() : float
    +get_sfx_volume_db() : float
    -save_volumes() : void
    -load_volumes() : void
    +fade_out_and_stop(duration: float) : void
    +_cancel_fade() : void
}


class GuiManager {
    -MAIN_MENU_BUTTON_GROUP : String
    -CREDITS_BUTTON_GROUP : String
    -SETTINGS_BUTTON_GROUP : String
    -INPUT_SETTINGS_BUTTON_GROUP : String
    -GAME_OVER_SCREEN_GROUP : String
    -PAUSE_MENU_GROUP : String
    -LEVELS_MENU_GROUP : String
    +game_hud_layer : CanvasLayer
    +main_menu_layer : CanvasLayer
    +credits_layer : CanvasLayer
    +settings_layer : CanvasLayer
    +input_settings_layer : CanvasLayer
    +game_over_screen : CanvasLayer
    +pause_menu_layer : CanvasLayer
    +levels_menu_layer : CanvasLayer
    +hover_sound_player : AudioStreamPlayer
    +select_sound_player : AudioStreamPlayer
    +back_sound_player : AudioStreamPlayer
    +settings_master_volume_slider : HSlider
    +settings_music_volume_slider : HSlider
    +settings_sfx_volume_slider : HSlider
    +settings_controls_btn : BaseButton
    -on_settings_back : Callable
    -black_hole_warning_tween : Tween
    -black_hole_warning_sources : int
    +hud_xp : ProgressBar
    +hud_score_label : Label
    +hud_timer_bar : ProgressBar
    +hud_timer_text : Label
    +hud_portal_active : Label
    +hud_god_mode : Label
    +level_up_notification_label : Label
    +black_hole_warning_label : Label
    +game_over_label : Label
    +game_over_restart_button : Button
    +levels_container : VBoxContainer
    +back_to_main_menu_button : Button
    -is_paused : bool

    -_ready() : void
    -_unhandled_input(event: InputEvent) : void
    -_connect_signal_safe(emitter: Object, signal_name: String, callable: Callable) : void
    -_connect_button_signals_recursively(parent_node: Node) : void
    -_focus_first_button_in(root_node: Node) : void
    -_collect_buttons_in_tree(root_node: Node) : Array
    -_tag_buttons_in_tree(root_node: Node, group_name: String) : void
    -_on_any_button_mouse_entered(hovered_button: BaseButton) : void
    -_on_any_button_focus_entered(_focused_button: BaseButton) : void
    -_play_select_sound() : void
    -_play_back_sound() : void
    -_on_any_button_pressed(pressed_button: BaseButton) : void
    -_on_main_menu_button_pressed(pressed_button: BaseButton) : void
    -_on_credits_button_pressed(pressed_button: BaseButton) : void
    -_on_settings_button_pressed(pressed_button: BaseButton) : void
    -_on_settings_master_volume_changed(db: float) : void
    -_on_settings_music_volume_changed(db: float) : void
    -_on_settings_sfx_volume_changed(db: float) : void
    -_on_input_settings_button_pressed(pressed_button: BaseButton) : void
    -_on_game_over_screen_button_pressed(pressed_button: BaseButton) : void
    -_on_pause_menu_button_pressed(pressed_button: BaseButton) : void
    -_on_levels_menu_button_pressed(pressed_button : BaseButton) : void
    +_show_levels_menu() : void
    +_generate_level_buttons() : void
    +show_main_menu() : void
    +show_settings() : void
    +show_credits() : void
    +show_input_settings() : void
    +show_pause_menu() : void
    +hide_pause_menu() : void
    +hide_pause_overlay_only() : void
    +show_pause_overlay_only() : void
    +show_level_up_notice(message: String) : void
    +notify_black_hole_warning(active: bool) : void
    +_start_black_hole_blink() : void
    +_stop_black_hole_blink() : void
}
GuiManager::_ready --> GlobalSingleton::gui_manager : Register Self
GuiManager::_ready --> GlobalAudioPlayer::_play_menu_music : Plays music
GuiManager::_ready --> GlobalSingleton::_ensure_settings_icon : Ensures
GuiManager::_unhandled_input --> GlobalAudioPlayer::on_pause_exited : Unpauses
GuiManager::_unhandled_input --> GlobalAudioPlayer::on_pause_entered : Pauses
GuiManager::_on_main_menu_button_pressed --> GlobalSingleton::continue_game : Continues
GuiManager::_on_main_menu_button_pressed --> GlobalSingleton::load_game : Loads
GuiManager::_on_main_menu_button_pressed --> GlobalSingleton::save_game : Saves
GuiManager::_on_main_menu_button_pressed --> GlobalSingleton::open_settings : Opens
GuiManager::_on_main_menu_button_pressed --> GlobalSingleton::open_credits : Opens
GuiManager::_on_main_menu_button_pressed --> GlobalSingleton::quit_game_from_menu : Quits
GuiManager::_on_credits_button_pressed --> GlobalSingleton::open_main_menu : Opens
GuiManager::_on_settings_button_pressed --> GlobalSingleton::open_contols : Opens
GuiManager::_on_settings_button_pressed --> GlobalAudioPlayer::save_volumes : Saves
GuiManager::_on_settings_master_volume_changed --> GlobalAudioPlayer::set_master_volume_db : Sets
GuiManager::_on_settings_music_volume_changed --> GlobalAudioPlayer::set_music_volume_db : Sets
GuiManager::_on_settings_sfx_volume_changed --> GlobalAudioPlayer::set_sfx_volume_db : Sets
GuiManager::_on_game_over_screen_button_pressed --> GlobalSingleton::restart_game : Restarts
GuiManager::_on_pause_menu_button_pressed --> GlobalSingleton::continue_game : Continues
GuiManager::_on_pause_menu_button_pressed --> GlobalSingleton::restart_game : Restarts
GuiManager::_on_pause_menu_button_pressed --> GlobalSingleton::open_settings : Opens
GuiManager::_on_pause_menu_button_pressed --> GlobalSingleton::open_main_menu : Opens
GuiManager::_on_levels_menu_button_pressed --> GlobalSingleton::quit_to_desktop_from_game : Quits
GuiManager::_on_levels_menu_button_pressed --> GlobalSingleton::open_main_menu : Opens
GuiManager::_generate_level_buttons --> GlobalSingleton::levels.keys : Gets
GuiManager::_generate_level_buttons --> GlobalSingleton::levels.level_id : Gets
GuiManager::_generate_level_buttons --> GlobalSingleton::levels::is_level_unlocked : Checks
GuiManager::_generate_level_buttons --> GlobalSingleton::change_level : Changes
GuiManager::_generate_level_buttons --> GlobalSingleton::start_game : Starts
GuiManager::show_settings --> GlobalAudioPlayer::get_master_volume_db : Gets
GuiManager::show_settings --> GlobalAudioPlayer::get_music_volume_db : Gets
GuiManager::show_settings --> GlobalAudioPlayer::get_sfx_volume_db : Gets


class LevelManager {
    -_ready() : void
}
LevelManager::_ready --> GlobalSingleton::level_manager : Register Self


class SettingsIcon {
    +toggle_settings_icon : TextureButton
    -_on_toggle_settings_button_pressed() : void
}
SettingsIcon::_on_toggle_settings_button_pressed --> GlobalSingleton::settings_icon : Register Self
SettingsIcon::_on_toggle_settings_button_pressed --> GlobalSingleton::open_settings_from_icon : Opens


class GlobalSingleton {
    +closest_enemy : function
    -SETTINGS_ICON : PackedScene
    -TUTORIAL_DIALOGUE : Dialogue
    +gui_manager: GuiManager
    +level_manager: LevelManager
    +level : Level
    +player : Player
    +settings_icon : SettingsIcon
    +quantum : bool
    +closest_distance : int
    +current_level: String
    +current_level_path: String
    +score : int
    +god_mode : bool
    +quantum_roll : int
    +portal_timer : float
    +_tutorial_running : bool
    +active_balloons: Array
    +levels: Dictionary
    +action_pressed(action_name) : Signal
    
    +start_game() : void
    +start_tutorial() : void
    +_wait_action(action_name) : void
    +_wait_any_action(action_names: Array) : void
    -_input(event: InputEvent) : void
    +_register_balloon(balloon: Node) : void
    +_close_all_dialogue_balloons() : void
    +continue_game() : void
    +load_game() : void
    +save_game() : void
    +open_settings() : void
    +open_settings_from_icon() : void
    +open_credits() : void
    +open_main_menu() : void
    +open_controls() : void
    +quit_game_from_menu() : void
    +quit_to_desktop_from_game() : void
    +restart_game() : void
    +reset_game_state() : void
    +game_over() : void
    +_tutorial() : bool
    +_level01() : bool
    +level_is_unlocked(level_id: String) : bool
    +goto_level(level_or_path: String) : void
    +change_level(load_level: String) : void
    +_ensure_settings_icon(parent: Node) : void
    +display_number(value: int, text_position: Vector2, text_color: String) : void
    +find_closest_enemy() : Object
    -_process(_delta: float) : void
}
GlobalSingleton::SETTINGS_ICON --> SettingsIcon : Preloads
GlobalSingleton::TUTORIAL_DIALOGUE --> TutorialDialoqueBalloon : Preloads
GlobalSingleton::gui_manager --> GuiManager : References
GlobalSingleton::level_manager --> LevelManager : References
GlobalSingleton::level --> Level : References
GlobalSingleton::player --> Player : References
GlobalSingleton::settings_icon --> SettingsIcon : References
GlobalSingleton::start_game --> GuiManager::main_menu_layer : Hides
GlobalSingleton::start_game --> GuiManager::game_hud_layer : Shows
GlobalSingleton::start_tutorial --> TutorialDialoqueBalloon : Instantiates
GlobalSingleton::continue_game --> GuiManager::is_paused : Sets
GlobalSingleton::continue_game --> GuiManager::hide_pause_menu : Hides
GlobalSingleton::continue_game --> GlobalAudioPlayer::on_pause_exited : Unpauses
GlobalSingleton::open_settings --> GuiManager::on_settings_back : Calls
GlobalSingleton::open_settings --> GuiManager::hide_pause_overlay_only : Hides
GlobalSingleton::open_settings --> GuiManager::open_main_menu : Calls
GlobalSingleton::open_settings --> GuiManager::show_settings : Shows
GlobalSingleton::open_settings_from_icon --> GuiManager::game_hud_layer : Sets
GlobalSingleton::open_settings_from_icon --> GuiManager::is_paused : Sets
GlobalSingleton::open_settings_from_icon --> GuiManager::hide_pause_overlay_only : Hides
GlobalSingleton::open_settings_from_icon --> GuiManager::on_settings_back : Calls
GlobalSingleton::open_settings_from_icon --> GlobalAudioPlayer::on_pause_entered : Pauses
GlobalSingleton::open_settings_from_icon --> GlobalAudioPlayer::_play_menu_music : Plays
GlobalSingleton::open_credits --> GuiManager::show_settings : Shows
GlobalSingleton::open_credits --> GuiManager::show_credits : Shows
GlobalSingleton::open_main_menu --> GuiManager::hide_pause_overlay_only : Hides
GlobalSingleton::open_main_menu --> GuiManager::pause_menu_layer : Hides
GlobalSingleton::open_main_menu --> GuiManager::show_main_menu : Shows
GlobalSingleton::open_main_menu --> GuiManager::is_paused : Sets
GlobalSingleton::open_main_menu --> GlobalAudioPlayer::_play_menu_music : Plays
GlobalSingleton::open_controls --> GuiManager::show_input_settings : Shows
GlobalSingleton::restart_game --> GuiManager::game_over_screen : Hides
GlobalSingleton::restart_game --> GuiManager::hud_portal_active : Hides
GlobalSingleton::restart_game --> GuiManager::hud_timer_bar : Changes
GlobalSingleton::restart_game --> GlobalAudioPlayer::_play_level_music : Plays
GlobalSingleton::reset_game_state --> GlobalAudioPlayer::on_level_restart : Resets
GlobalSingleton::game_over --> GuiManager::hide_pause_menu : Hides
GlobalSingleton::reset_game_state --> GuiManager::hud_score_label : Resets
GlobalSingleton::reset_game_state --> GuiManager::hud_xp : Resets
GlobalSingleton::game_over --> GuiManager::game_over_screen : Shows
GlobalSingleton::game_over --> GuiManager::hud_portal_active : Hides
GlobalSingleton::game_over --> GlobalAudioPlayer::stop_music : Stops
GlobalSingleton::game_over --> GlobalAudioPlayer::_play_menu_music : Plays
GlobalSingleton::change_level --> Level : Changes
GlobalSingleton::_ensure_settings_icon --> SettingsIcon : Instantiates
GlobalSingleton::find_closest_enemy --> Asteroid : Searches


class SoundIcon {
    -MASTER_BUS_NAME : String
    -ICON_OFF : Texture2D
    -ICON_ON : Texture2D
    -sound_toggle_button : TextureButton
    -master_bus_index : int

    -_ready() : void
    -_on_sound_toggle_button_pressed() : void
    -_is_master_muted() : bool
    -_set_master_muted(muted: bool) : void
    -_update_icon(is_muted: bool) : void
}


class InputSettings {
    -SAVE_PATH : String
    -CONFIG_SECTION_INPUT : String
    -input_button_scene : PackedScene
    -action_list : VBoxContainer
    -reset_button : Button
    -back_to_settingd_button : Button
    -is_remapping : bool
    -action_to_remap : String
    -remapping_button : Node
    -remap_armed : bool
    -input_actions : Dictionary

    -_ready() : void
    -_on_back_to_settings_button_pressed() : void
    -_on_reset_button_pressed() : void
    -_on_input_button_pressed(button: Node, action: String) : void
    -_create_action_list() : void
    -_update_action_list(button: Node, event: InputEvent) : void
    -_input(event: InputEvent) : void
    -_save_input_map(should_clear_file: bool) : void
    -_load_input_map() : void
    -_serialize_event(input_event: InputEvent) : Dictionary
    -_deserialize_event(event_data: Dictionary) : InputEvent
    -_delete_user_file() : void
    -_enable_remap_capture() : void
    -_event_signature(event: InputEvent) : String
    -_is_event_in_use(new_event: InputEvent, except_action: String) : String
    -_set_error_ui(line_button: Node, is_error: bool) : void
}

@enduml